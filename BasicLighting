//Vertex Shader

in highp vec4 position;
in mediump vec3 normal;
in mediump vec2 texcoord0;

out mediump vec3 va_normal;
out mediump vec4 va_pos;


uniform mat4 modelViewProjectionMatrix;
uniform mat3 normalMatrix;
uniform mat4 modelMatrix;
uniform mat4 modelViewMatrix;

void main()
{
  //Compute transformed normal
  
  va_normal = normalize(normalMatrix * normal);
  
  va_pos = modelViewMatrix * position;
  
  //Pass GL-trasnformed to vertex down pipeline
  gl_Position = modelViewProjectionMatrix * position;
}


//Fragment Shader

precision mediump float;
in mediump vec3 va_normal;
in mediump vec4 va_pos;
out vec4 fragColor;

struct Light{
    vec4 position;
    };		
uniform Light lights[2];
  		


void main()
{
  vec3 eyeNormal = normalize(va_normal);
  //vec3 lightDir = vec3(0.0, 0.0, 1.0);
  vec3 lightDir = lights[1].position.xyz - va_pos.xyz;
  lightDir = normalize(lightDir);
  vec4 diffuseColor = vec4(0.4, 0.4, 1.0, 1.0);
  float nDotVP = max(0.0, dot(eyeNormal, lightDir));
  
  fragColor = diffuseColor * nDotVP;
}
